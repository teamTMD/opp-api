from fastapi import Path, Query, HTTPException, APIRouter
from pydantic import BaseModel, Field
from starlette import status

import models
from models import Todos, GenericObject


router = APIRouter()


class GenericObjectRequest(BaseModel):
    name: str = Field(min_length=3, max_length=100)
    price: float = Field(gt=0, lt=6)

    class Config:
        json_schema_extra = {
            'example': {
                'name': 'foobar',
                'price': 3.324
            }
        }



@router.get("/api/")
async def api_query_param(
        query_param: str = Query(min_length=2, max_length=100)):  # query_param automatically generated by FastAPI
    return {"message": 'Hello World', "query_param": query_param}


@router.post("/api/create_obj", status_code=status.HTTP_201_CREATED)
async def create_obj(obj_request: models.GenericObjectRequest):  # validate in ObjectRequest
    try:
        new_obj = GenericObject(**obj_request.model_dump())
        print(new_obj)
        return {"body": new_obj}
    except:
        raise HTTPException(status_code=400, detail="Boo")


@router.put("/api/update_obj", status_code=status.HTTP_204_NO_CONTENT)
async def update_obj(obj: GenericObject):
    return {"body": obj}


@router.delete("/api/delete_obj/{obj_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_obj(obj_id: int):
    return {"status": True, "obj_id": obj_id}


@router.get("/api/obj/{obj_id}", status_code=status.HTTP_200_OK)
async def get_obj(obj_id: int = Path(gt=0)):  # validate path params
    return {"obj_int": obj_id}
